// Payment Functions
function selectPaymentMethod(method) {
    // Update active payment method
    document.querySelectorAll('.payment-method').forEach(el => {
        el.classList.remove('active');
    });
    
    document.querySelector(`.payment-method[data-method="${method}"]`).classList.add('active');
    
    // Show corresponding form
    document.querySelectorAll('.payment-details').forEach(form => {
        form.classList.remove('active');
    });
    
    document.getElementById(`${method}-form`).classList.add('active');
}

// Set up payment method selection
document.querySelectorAll('.payment-method').forEach(method => {
    method.addEventListener('click', function() {
        selectPaymentMethod(this.getAttribute('data-method'));
    });
});

// Set up payment buttons
document.getElementById('pay-now-btn').addEventListener('click', function() {
    hideUpgradeModal();
    showPaymentModal();
});

// M-Pesa Payment
document.getElementById('confirm-mpesa-payment').addEventListener('click', handleMpesaPayment);

// PayPal Payment
document.getElementById('confirm-paypal-payment').addEventListener('click', handlePayPalPayment);

// Stripe Payment
document.getElementById('confirm-stripe-payment').addEventListener('click', handleStripePayment);

// Payment status handlers
document.getElementById('success-continue').addEventListener('click', function() {
    hidePaymentStatusModal();
    showToast('Account activated successfully!', 'success');
});

document.getElementById('retry-payment').addEventListener('click', function() {
    hidePaymentStatusModal();
    showPaymentModal();
});

document.getElementById('change-method').addEventListener('click', function() {
    hidePaymentStatusModal();
    showPaymentModal();
});

function showPaymentModal() {
    hideAllModals();
    document.getElementById('payment-modal').classList.add('active');
}

function hidePaymentModal() {
    document.getElementById('payment-modal').classList.remove('active');
}

function showPaymentStatusModal() {
    hideAllModals();
    document.getElementById('payment-status-modal').classList.add('active');
}

function hidePaymentStatusModal() {
    document.getElementById('payment-status-modal').classList.remove('active');
}

function showPaymentProcessing() {
    document.getElementById('payment-processing').classList.remove('hidden');
    document.getElementById('payment-success').classList.add('hidden');
    document.getElementById('payment-failed').classList.add('hidden');
    document.getElementById('payment-status-title').textContent = 'Processing Payment';
}

function showPaymentSuccess() {
    document.getElementById('payment-processing').classList.add('hidden');
    document.getElementById('payment-success').classList.remove('hidden');
    document.getElementById('payment-failed').classList.add('hidden');
    document.getElementById('payment-status-title').textContent = 'Payment Successful';
}

function showPaymentFailed(reason) {
    document.getElementById('payment-processing').classList.add('hidden');
    document.getElementById('payment-success').classList.add('hidden');
    document.getElementById('payment-failed').classList.remove('hidden');
    document.getElementById('payment-status-title').textContent = 'Payment Failed';
    
    if (reason) {
        document.getElementById('failure-reason').textContent = reason;
    }
}

function handleMpesaPayment() {
    const phone = document.getElementById('mpesa-phone').value;
    const transactionCode = document.getElementById('mpesa-code').value;
    
    // Validation
    if (!phone) {
        showToast('Please enter your M-Pesa phone number', 'error');
        return;
    }
    
    if (!transactionCode) {
        showToast('Please enter the M-Pesa transaction code', 'error');
        return;
    }
    
    // Validate phone number format (Kenyan format)
    const phoneRegex = /^(\+?254|0)?[17]\d{8}$/;
    if (!phoneRegex.test(phone.replace(/\s/g, ''))) {
        showToast('Please enter a valid Kenyan phone number', 'error');
        return;
    }
    
    // Show processing status
    hidePaymentModal();
    showPaymentStatusModal();
    showPaymentProcessing();
    
    // Simulate M-Pesa payment verification
    setTimeout(() => {
        // Check if transaction code contains the required message
        // In a real implementation, this would verify with M-Pesa API
        const hasRequiredMessage = verifyMpesaTransaction(transactionCode);
        
        if (hasRequiredMessage) {
            processSuccessfulPayment('mpesa', 49.99);
            showPaymentSuccess();
        } else {
            showPaymentFailed('Transaction unsuccessful. Please ensure you included "Hakika R Provision" in the message section and try again.');
        }
    }, 3000);
}

function verifyMpesaTransaction(transactionCode) {
    // Simulate M-Pesa transaction verification
    // In a real implementation, this would call M-Pesa API
    
    // For demo purposes, we'll check if the transaction code looks valid
    // and simulate different outcomes
    const transactionCodeRegex = /^[A-Z0-9]{10}$/;
    
    if (!transactionCodeRegex.test(transactionCode)) {
        return false;
    }
    
    // Simulate: 80% success rate for demo
    return Math.random() > 0.2;
}

function handlePayPalPayment() {
    const email = document.getElementById('paypal-email').value;
    
    if (!email) {
        showToast('Please enter your PayPal email address', 'error');
        return;
    }
    
    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        showToast('Please enter a valid email address', 'error');
        return;
    }
    
    // Show processing status
    hidePaymentModal();
    showPaymentStatusModal();
    showPaymentProcessing();
    
    // Simulate PayPal payment processing
    setTimeout(() => {
        // Simulate: 90% success rate for demo
        if (Math.random() > 0.1) {
            processSuccessfulPayment('paypal', 49.99);
            showPaymentSuccess();
        } else {
            showPaymentFailed('PayPal payment failed. Please check your account balance and try again.');
        }
    }, 3000);
}

function handleStripePayment() {
    const cardNumber = document.getElementById('card-number').value;
    const expiryDate = document.getElementById('expiry-date').value;
    const cvv = document.getElementById('cvv').value;
    const cardName = document.getElementById('card-name').value;
    
    // Validation
    if (!cardNumber || !expiryDate || !cvv || !cardName) {
        showToast('Please fill in all card details', 'error');
        return;
    }
    
    // Validate card number (basic Luhn check)
    if (!isValidCardNumber(cardNumber.replace(/\s/g, ''))) {
        showToast('Please enter a valid card number', 'error');
        return;
    }
    
    // Validate expiry date
    if (!isValidExpiryDate(expiryDate)) {
        showToast('Please enter a valid expiry date (MM/YY)', 'error');
        return;
    }
    
    // Validate CVV
    const cvvRegex = /^[0-9]{3,4}$/;
    if (!cvvRegex.test(cvv)) {
        showToast('Please enter a valid CVV', 'error');
        return;
    }
    
    // Show processing status
    hidePaymentModal();
    showPaymentStatusModal();
    showPaymentProcessing();
    
    // Simulate Stripe payment processing
    setTimeout(() => {
        // Simulate: 85% success rate for demo
        if (Math.random() > 0.15) {
            processSuccessfulPayment('stripe', 49.99);
            showPaymentSuccess();
        } else {
            showPaymentFailed('Card payment declined. Please check your card details and try again.');
        }
    }, 3000);
}

function isValidCardNumber(cardNumber) {
    // Basic Luhn algorithm check
    let sum = 0;
    let isEven = false;
    
    for (let i = cardNumber.length - 1; i >= 0; i--) {
        let digit = parseInt(cardNumber.charAt(i), 10);
        
        if (isEven) {
            digit *= 2;
            if (digit > 9) {
                digit -= 9;
            }
        }
        
        sum += digit;
        isEven = !isEven;
    }
    
    return (sum % 10) === 0;
}

function isValidExpiryDate(expiryDate) {
    const regex = /^(0[1-9]|1[0-2])\/([0-9]{2})$/;
    if (!regex.test(expiryDate)) {
        return false;
    }
    
    const [month, year] = expiryDate.split('/');
    const now = new Date();
    const currentYear = now.getFullYear() % 100;
    const currentMonth = now.getMonth() + 1;
    
    const expiryYear = parseInt(year, 10);
    const expiryMonth = parseInt(month, 10);
    
    if (expiryYear < currentYear) {
        return false;
    }
    
    if (expiryYear === currentYear && expiryMonth < currentMonth) {
        return false;
    }
    
    return true;
}

function processSuccessfulPayment(method, amount) {
    const currentUser = getCurrentUser();
    
    if (!currentUser) {
        showToast('Please log in to complete payment', 'error');
        return;
    }
    
    // Record payment
    const payments = JSON.parse(localStorage.getItem('payments')) || [];
    const newPayment = {
        id: Date.now(),
        userId: currentUser.id,
        amount: amount,
        method: method,
        type: 'activation',
        status: 'completed',
        date: new Date().toISOString(),
        transactionDetails: method === 'mpesa' ? {
            phone: document.getElementById('mpesa-phone').value,
            transactionCode: document.getElementById('mpesa-code').value
        } : {}
    };
    
    payments.push(newPayment);
    localStorage.setItem('payments', JSON.stringify(payments));
    
    // Update user activation status
    updateUserActivation();
    
    // Reset payment forms
    resetPaymentForms();
    
    // Update user balance (add initial bonus or something)
    const users = JSON.parse(localStorage.getItem('users')) || [];
    const userIndex = users.findIndex(user => user.id === currentUser.id);
    
    if (userIndex !== -1) {
        users[userIndex].isActivated = true;
        users[userIndex].activationDate = new Date().toISOString();
        localStorage.setItem('users', JSON.stringify(users));
        
        // Update current user session
        currentUser.isActivated = true;
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
    }
}

function resetPaymentForms() {
    // Reset all payment form fields
    document.getElementById('mpesa-phone').value = '';
    document.getElementById('mpesa-code').value = '';
    document.getElementById('paypal-email').value = '';
    document.getElementById('card-number').value = '';
    document.getElementById('expiry-date').value = '';
    document.getElementById('cvv').value = '';
    document.getElementById('card-name').value = '';
    
    // Reset to M-Pesa as default
    selectPaymentMethod('mpesa');
}

function updateUserActivation() {
    const currentUser = getCurrentUser();
    if (currentUser) {
        const users = JSON.parse(localStorage.getItem('users')) || [];
        const userIndex = users.findIndex(user => user.id === currentUser.id);
        
        if (userIndex !== -1) {
            users[userIndex].isActivated = true;
            localStorage.setItem('users', JSON.stringify(users));
            
            // Update current user
            currentUser.isActivated = true;
            localStorage.setItem('currentUser', JSON.stringify(currentUser));
        }
    }
}